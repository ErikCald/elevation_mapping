elevation_mapping:
  ros__parameters:
    # postprocessor_pipeline_name: traversability_postprocessing
    output_topic: trasversability_map

    postprocessor_pipeline:

        # General note: Using MedianFilter instead of inpaint because inpaint is broken
        # Inpaint filter is broken, stacktrace below:
        #0  0x0000fffff6bb7724 in cv::_OutputArray::create(cv::Size_<int>, int, int, bool, cv::_OutputArray::DepthMask) const () 
        #           from /lib/aarch64-linux-gnu/libopencv_core.so.4.5d
        #1  0x0000fffff7a4c890 in cv::inpaint(cv::_InputArray const&, cv::_InputArray const&, cv::_OutputArray const&, double, int) () from /lib/libopencv_photo.so.408
        #2  0x0000fffff7aa1c94 in ?? () from /opt/ros/humble/lib/libgrid_map_cv.so
        #3  0x0000aaaaaab78fac in elevation_mapping::PostprocessingPipelineFunctor::operator()(grid_map::GridMap&) ()

      filter1:
        name: buffer_normalizer
        type: gridMapFilters/BufferNormalizerFilter
      

      # Delete unnessecary layers.
      filter2:
        name: delete_original_layers
        type: gridMapFilters/DeletionFilter
        params:
          layers: [color, lowest_scan_point,sensor_x_at_lowest_scan, sensor_y_at_lowest_scan, sensor_z_at_lowest_scan] # List of layers.

      # Fill holes in the elevation map using a median filter.
      # filter2:
      #   name: median
      #   type: gridMapFilters/MedianFillFilter
      #   params:
      #     input_layer: elevation
      #     output_layer: elevation_filled
      #     fill_hole_radius: 0.05 # in m. 
      #     filter_existing_values: false # Default is false. If enabled it also does a median computation for existing values. 
      #     existing_value_radius: 0.2 # in m. Note that this option only has an effect if filter_existing_values is set true. 
      #     fill_mask_layer: fill_mask # A layer that is used to compute which areas to fill. If not present in the input it is automatically computed. 
      #     debug: false # If enabled, the additional debug_infill_mask_layer is published. 
      #     debug_infill_mask_layer: infill_mask # Layer used to visualize the intermediate, sparse-outlier removed fill mask. Only published if debug is enabled

      # # Reduce noise with a radial blurring filter.
      # filter3:
      #   name: mean_in_radius
      #   type: gridMapFilters/MeanInRadiusFilter
      #   params:
      #     input_layer: elevation_filled
      #     output_layer: elevation_smooth
      #     radius: 0.06

      # Boxblur as an alternative to the inpaint and radial blurring filter above.
      filter3:
        name: boxblur
        type: gridMapFilters/SlidingWindowMathExpressionFilter
        params:
          input_layer: elevation
          output_layer: elevation_smooth
          expression: meanOfFinites(elevation)
          compute_empty_cells: true
          edge_handling: crop # options: inside, crop, empty, mean
          window_size: 3 # optional

      # Compute Surface normals
      filter4:
        name: surface_normals
        type: gridMapFilters/NormalVectorsFilter
        params:
          # input_layer: elevation_inpainted
          input_layer: elevation_smooth
          output_layers_prefix: normal_vectors_
          radius: 0.3 # 1.5 times the map resolution is good
          normal_vector_positive_axis: z

      # Add a color layer for visualization based on the surface normal.
      filter5:
        name: normal_color_map
        type: gridMapFilters/NormalColorMapFilter
        params:
          input_layers_prefix: normal_vectors_
          output_layer: normal_color

      # Compute slope from surface normal.
      filter6:
        name: slope
        type: gridMapFilters/MathExpressionFilter
        params:
          output_layer: slope
          expression: acos(normal_vectors_z)

      # Compute roughness as absolute difference from map to smoothened map.
      filter7:
        name: roughness
        type: gridMapFilters/MathExpressionFilter
        params:
          output_layer: roughness
          expression: abs(elevation - elevation_smooth)

      # # Edge detection by computing the standard deviation from slope.
      # filter8:
      #   name: edge_detection
      #   type: gridMapFilters/SlidingWindowMathExpressionFilter
      #   params:
      #     input_layer: slope
      #     output_layer: edges
      #     expression: sqrt(sumOfFinites(square(slope - meanOfFinites(slope))) ./ numberOfFinites(slope)) # Standard deviation
      #     compute_empty_cells: false
      #     edge_handling: crop # options: inside, crop, empty, mean
      #     window_length: 0.2

      # Compute traversability as normalized weighted sum of slope and roughness.
      filter8:
        name: traversability
        type: gridMapFilters/MathExpressionFilter
        params:
          output_layer: traversability
          expression: 0.5 * (1.0 - (slope / 0.6)) + 0.5 * (1.0 - (roughness / 0.1))

      # Set lower threshold on traversability.
      filter9:
        name: traversability_lower_threshold
        type: gridMapFilters/ThresholdFilter
        params:
          layer: traversability
          output_layer: traversability
          lower_threshold: 0.0
          set_to: 0.0

      # Set upper threshold on traversability.
      filter10:
        name: traversability_upper_threshold
        type: gridMapFilters/ThresholdFilter
        params:
          layer: traversability
          output_layer: traversability
          upper_threshold: 1.0
          set_to: 1.0 # Other uses: .nan, .inf
